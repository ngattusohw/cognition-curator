import random
import asyncio
from typing import List, Dict, Any

from .base import AIProvider, FlashcardData, AIGenerationRequest, AIResponse


class MockProvider(AIProvider):
    """Mock AI provider for fallback when real AI services fail"""

    def __init__(self):
        super().__init__("mock", "mock-model")

    @property
    def name(self) -> str:
        return "Mock"

    @property
    def max_tokens(self) -> int:
        return 4096

    def get_provider_info(self) -> Dict[str, str]:
        return {
            "name": self.name,
            "model": "mock-fallback",
            "provider": "Mock",
            "max_tokens": str(self.max_tokens)
        }

    async def generate_flashcards(self, request: AIGenerationRequest) -> AIResponse:
        """Generate basic fallback flashcards"""

        # Simulate processing time
        await asyncio.sleep(random.uniform(0.5, 1.5))

        cards = []
        for i in range(min(request.number_of_cards, 5)):  # Limit fallback cards
            card = FlashcardData(
                question=f"What is a key concept in {request.topic}? (Card {i+1})",
                answer=f"This is an important concept in {request.topic} that requires study and understanding.",
                explanation="This is a fallback card generated when AI services are unavailable.",
                difficulty=request.difficulty,
                tags=[request.topic.lower(), "fallback", "mock"],
                confidence=0.4
            )
            cards.append(card)

        metadata = {
            "model": "mock-fallback",
            "provider": self.name,
            "tokens_used": 0,
            "generation_time": random.uniform(0.8, 1.5),
            "note": "Generated by fallback provider - AI service unavailable"
        }

        return AIResponse(cards=cards, metadata=metadata)

    async def generate_similar_card(self, base_card: FlashcardData, topic: str) -> FlashcardData:
        """Generate a basic similar card"""

        await asyncio.sleep(random.uniform(0.3, 0.8))

        return FlashcardData(
            question=f"What is another aspect of {topic} related to the previous concept?",
            answer=f"This is a related concept in {topic} that builds on similar principles.",
            explanation="This similar card was generated by the fallback provider.",
            difficulty=base_card.difficulty,
            tags=base_card.tags + ["similar", "fallback"],
            confidence=0.3
        )

    async def generate_answer(self, question: str, context: str = "", deck_topic: str = "") -> Dict[str, Any]:
        """Generate a basic answer"""

        await asyncio.sleep(random.uniform(0.2, 0.6))

        return {
            "answer": f"This is a fallback answer for your question about {deck_topic or 'the topic'}. The AI service is currently unavailable.",
            "explanation": "Generated by fallback provider when AI service is unavailable.",
            "confidence": 0.2,
            "sources": [],
            "suggested_tags": ["fallback", "mock"]
        }